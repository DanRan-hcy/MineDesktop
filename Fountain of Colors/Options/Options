Add-Type -AssemblyName System.Windows.Forms

[Windows.Forms.Application]::EnableVisualStyles()
[Windows.Forms.Application]::SetCompatibleTextRenderingDefault($False)

$form = New-Object Windows.Forms.Form -Property @{
  AutoSize      = $True
  AutoSizeMode  = "GrowAndShrink"
  ShowInTaskbar = $False
  MinimizeBox   = $False
  MaximizeBox   = $False
  SizeGripStyle = "Hide"
  StartPosition = "CenterScreen"
  Font          = New-Object System.Drawing.Font("Tahoma", 8)
}
$form.SuspendLayout()

$tableForm = New-Object Windows.Forms.TableLayoutPanel -Property @{
  Dock = "Fill"
  AutoSize = $True
  AutoSizeMode = "GrowAndShrink"
}
$tableForm.SuspendLayout()

$rmPath = (Get-Process "Rainmeter").Path
$form.Icon = [Drawing.Icon]::ExtractAssociatedIcon($rmPath)

function SetKeyVal { param($k, $v)
  if ($form.Visible) {
    & $rmPath [!SetVariable Key $k "#CURRENTCONFIG#"][!SetVariable Value `"$v`" "#CURRENTCONFIG#"][!UpdateMeasure MsgHandler "#CURRENTCONFIG#"]
  }
}


## Custom ##
function calcdB      { param($i) 10*[Math]::Log($i*(48000/#FFTBufferSize#),10) }
function calcFFTSize { param($i) [Math]::Round(48000/$i) }

$Angle = '#Angle#'
if (!($Angle))       { $Angle = 0 }
$Sensitivity = '#Sensitivity#'
if (!($Sensitivity)) { $Sensitivity = 36 }


## Group & Table ##
$groupText =
  'General',
  'Thickness/Gap/Height',
  'Filters',
  'Effects',
  'Transform',
  'Scale',
  'Process'

$i=0
$groups = @(0) * $groupText.Count
$tables = @(0) * $groupText.Count
foreach ($el in $groupText) {
  $group = New-Object Windows.Forms.GroupBox -Property @{
    Anchor       = "Left","Right"
    AutoSize     = $True
    AutoSizeMode = "GrowAndShrink"
    Text         = $el
  }
  $group.SuspendLayout()
  $groups[$i] = $group

  $table = New-Object Windows.Forms.TableLayoutPanel -Property @{
    Dock         = "Fill"
    AutoSize     = $True
    AutoSizeMode = "GrowAndShrink"
  }
  $table.SuspendLayout()
  $tables[$i++] = $table
}


## Label ##
$labelText =
  'bands generated',
  'values',
  'attack rate',
  'decay rate',
  '10 * log10 ( (48000 / #FFTBufferSize#) *',
  '-',
  '1 /',
  'seconds of samples',
  'interpolated samples'

$i=0
$labels = @(0) * $labelText.Count
foreach ($el in $labelText) {
  $labels[$i++] = New-Object Windows.Forms.Label -Property @{
    Anchor    = "Left"
    TextAlign = "MiddleLeft"
    AutoSize  = $True
    Margin    = 0
    Text      = $el
  }
}


## Button ##
$buttonData = @(
  ('Mirror',0),
  ('Invert','#Invert#')
)

$i=0
$buttons = @(0) * $buttonData.Count
foreach ($arr in $buttonData) {
  $buttons[$i++] = New-Object Windows.Forms.Button -Property @{
    AutoSize  = $True
    Text      = $arr[0]
    Tag       = $arr[1] -ne ''
    Add_Click = {
      $this.Tag = !($this.Tag)
      SetKeyVal $this.Text ([int]$this.Tag)
    }
  }
}


## Checkbox ##
$checksData = @(
  ('DecayEffect', #DecayEffect#, 'Fade out'),
  ('MinBarHeight',#MinBarHeight#,'Idle')
)

$i=0
$checks = @(0) * $checksData.Count
foreach ($arr in $checksData) {
  $checks[$i++] = New-Object Windows.Forms.CheckBox -Property @{
    AutoSize   = $True
    CheckState = [Math]::Max(0,[Math]::Min(1,$arr[1]))
    Text       = $arr[2]
    Tag        = $arr[0]
    Add_Click  = { SetKeyVal $this.Tag ([int]$this.CheckState) }
  }
}


## Radio button ##
$radioData = @(
  ("Port",
    "#Port#",
    ('In','Out'),
    ('Input','')
  )
)

$i=0
$radios = @(0) * $radioData[3].Count
foreach ($alias in $radioData[3]) {
  $radios[$i++] = New-Object Windows.Forms.RadioButton -Property @{
    Anchor    = "Left"
    AutoSize  = $True
    Checked   = $alias -eq $radioData[1]
    Name      = $alias
    Text      = $radioData[2][$i]
    Tag       = $radioData[0]
    Add_Click = {
      $this.Checked = $True
      SetKeyVal $this.Tag $this.Name
    }
  }
}


## Dropdown ##
$comboData = @(
  ("Colors",
    "#Colors#",
    ('Solid', 'Random','Accent','Wallpaper'),
    ('Single','Random','Window','Wallpaper')
  ),
  ("AverageSize",
    "#AverageSize#",
    $( "Real-time"; (1..6) | %{-join('+',$_,' delayed')} ),
    $( ''; (1..6) )
  ),
  ("FFTAttack",
    #FFTAttack#,
    ('Real-time','Very fast','Fast','Delayed','Slow','Very slow'),
    $( 0; (0..4) | %{[Math]::Pow(2, $_)} | %{ 62.5 * $_ } )
  ),
  ("FFTDecay",
    #FFTDecay#,
    ('Real-time','Very fast','Fast','Delayed','Slow','Very slow'),
    $( 0; (0..4) | %{[Math]::Pow(2, $_)} | %{ 62.5 * $_ } )
  ),
  ("FreqMin",
    #FreqMin#,
    $( ('C','C#','D','D#','E','F','F#','G','G#','A','A#','B') | %{-join($_,'0')} ),
    $( (-45..-34) | %{[Math]::Pow([Math]::Pow(2, 1/12), $_) * 220} )
  ),
  ("FreqMax",
    #FreqMax#,
    $( ('C','C#','D','D#','E','F','F#') | %{-join($_,'10')}; "Nyquist" ),
    $( (75..81) | %{[Math]::Pow([Math]::Pow(2, 1/12), $_) * 220}; "24000" )
  ),
  ("FFTBufferSize",
    "#FFTBufferSize#",
    $( 0; (11..15) | %{[Math]::Pow(2, $_)} ),
    $( 0; (11..15) | %{[Math]::Pow(2, $_)} )
  ),
  ("Channel",
    "#Channel#",
    ('Sum','FL','FR','C','LFE','BL','BR','SL','SR'),
    ('',   'FL','FR','C','LFE','BL','BR','SL','SR')
  )
)

$i=0
$combos = @(0) * $comboData.Count
foreach ($arr in $comboData) {
  $combo = New-Object Windows.Forms.ComboBox -Property @{
    Anchor        = "Left"
    DropDownStyle = "DropDownList"
    Tag = $arr
    Add_SelectedIndexChanged = {
      SetKeyVal $this.Tag[0] $this.Tag[3][$this.SelectedIndex]
    }
  }

  $combo.Items.AddRange($arr[2])

  $j=0
  foreach ($alias in $arr[3]) {
    if ($alias -like $arr[1]) {
      $combo.SelectedIndex = $j; break
    } ++$j
  }

  $max = 0
  foreach ($str in $arr[2]) {
    $temp = [Windows.Forms.TextRenderer]::MeasureText($str, $form.Font).Width
    if ($temp -gt $max) { $max = $temp }
  }
  $combo.Width = $max + [Windows.Forms.SystemInformation]::VerticalScrollBarWidth

  $combos[$i++] = $combo
}


## List ##
$dimsRange = (0..30)
$listData = @(
  ('BarWidth',#BarWidth#,$dimsRange),
  ('BarGap',  #BarGap#,  $dimsRange)
)

$i=0
$lists = @(0) * $listData.Count
foreach ($arr in $listData) {
  $list = New-Object Windows.Forms.ListBox -Property @{
    Tag = $arr[0]
    Add_SelectedIndexChanged = {
      SetKeyVal $this.Tag $this.SelectedItem
    }
  }
  $list.Items.AddRange($arr[2])
  $list.SelectedIndex = $arr[2][$arr[1]]

  $list.Width = 1.75 * [Windows.Forms.TextRenderer]::MeasureText($arr[2][$arr[2].Count-1], $form.Font).Width +
    [Windows.Forms.SystemInformation]::VerticalScrollBarWidth

  $lists[$i++] = $list
}


## Slider & Tooltip ##
$trackBarParams = @(
  ("BarHeight",  
    [Math]::Max(1, [Math]::Min(#BarHeight#, #WORKAREAHEIGHT#/2)),
    1, $(#WORKAREAHEIGHT#/2), $(#WORKAREAHEIGHT#/2/4)
  ),
  ("Angle",
    [Math]::Max(0, [Math]::Min($Angle, 360)),
    0, 360, $(360/4), 1
  ),
  ("Sensitivity",
    [Math]::Max(1, [Math]::Min( [Math]::Pow(10, $Sensitivity/10) / (48000/#FFTBufferSize#), #FFTBufferSize# )),
    1, #FFTBufferSize#, $(#FFTBufferSize#/4), 2
  )
)

$i=0
$trackBars = @(0) * $trackBarParams.Count
$toolTips  = @(0) * $trackBarParams.Count
foreach ($param in $trackBarParams) {
  $trackBars[$i] = New-Object Windows.Forms.TrackBar -Property @{
    Anchor        = "Bottom","Left","Right"
    Minimum       = $param[2]
    Maximum       = $param[3]
    TickFrequency = $param[4]
    Margin        = 0
#AutoSize=$False
    Name          = $i
    Tag           = $param
    Add_Scroll = {
      if ($this.Tag[5]) {
        $inputs[$this.Tag[5]].Value = $this.Value
      } else { 
        SetKeyVal $this.Tag[0] $this.Value
        $toolTips[$this.Name].SetToolTip($this, $this.Value)
      }
    }
  }
  $trackBars[$i].Value = $param[1]
  $toolTips[$i++] = New-Object Windows.Forms.ToolTip -Property @{
    ShowAlways = $True
  }
}


## Input ##
$inputParams = @(
  ("Bands",
    [Math]::Max(2, [Math]::Min(#Bands#, 480)),
    2, 480, 10
  ),
  ("Angle",
    [Math]::Max(0, [Math]::Min($Angle, 360)),
    0, 360, 0.5, $False, 1
  ),
  ("Sensitivity",
    [Math]::Max(1, [Math]::Min( [Math]::Pow(10, $Sensitivity/10) / (48000/#FFTBufferSize#), #FFTBufferSize# )),
    1, #FFTBufferSize#, 1, "calcdB", 2, " dB"
  ),
  ("FFTSize",
    [Math]::Max(1, [Math]::Min(48000/#FFTSize#, 64)),
    1, 64, 1, "calcFFTSize"
  )
)

$i=0
$inputs = @(0) * $inputParams.Count
foreach ($param in $inputParams) { 
  $inputs[$i] = New-Object Windows.Forms.NumericUpDown -Property @{
    Anchor    = "Left"
    TextAlign = "Right"
    AutoSize  = $True
    Minimum   = $param[2]
    Maximum   = $param[3]
    Increment = $param[4]
    Name      = $param[0]
    TabIndex  = $i
#Tag=$i
    Add_ValueChanged = {
      $result = $this.Value
      if ($inputParams[$this.TabIndex][5]) {
        $result = & $inputParams[$this.TabIndex][5] $result
      }
      if ($inputParams[$this.TabIndex][6]) {
        $trackBarIdx = $inputParams[$this.TabIndex][6]
        $trackBars[$trackBarIdx].Value = $this.Value
        $toolTips[$trackBarIdx].SetToolTip(
          $trackBars[$trackBarIdx], -join($result,$inputParams[$this.TabIndex][7])
        )
      }
      SetKeyVal $this.Name $result
    }
  }
  $inputs[$i++].Value = $param[1]
}


## Color button ##
$clrButton = New-Object Windows.Forms.Button -Property @{
  Anchor    = "Right"
  Width     = 32
  BackColor = [Drawing.Color]::FromArgb(#PaletteColor1#)
  Add_Click = {
    $colorDialog = New-Object Windows.Forms.ColorDialog -Property @{
      FullOpen = $True
      Color = $clrButton.BackColor
    }
    $colorDialog.ShowDialog()

    $clrButton.BackColor = $colorDialog.Color
    $newColor = -join($clrButton.BackColor.R,',',$clrButton.BackColor.G,',',$clrButton.BackColor.B)
    SetKeyVal "PaletteColor1" $newColor
  }
}


## Link ##
$link = New-Object Windows.Forms.LinkLabel -Property @{
  Margin    = "8,1,8,0"
  LinkColor = [Drawing.Color]::FromArgb(0,119,204)
  Text      = "Edit values..."
  Add_LinkClicked = { SetKeyVal "EditVars" 1 }
}


## LAYOUT ##

$combos[2].Width = $combos[3].Width = $combos[1].Width

$trackBars[0].Height = $lists[0].Height

$trackBars[0].Orientation = "Vertical"

$trackBars[0].Anchor = "Top","Bottom","Right"

$inputs[1].DecimalPlaces = 1

$tables[4].SetColumnSpan($buttons[0],   2)
$tables[4].SetColumnSpan($trackBars[1], 2)

$tables[5].SetColumnSpan($labels[4],    3)
$tables[5].SetColumnSpan($trackBars[2], 2)

$tables[6].SetColumnSpan($labels[7], 2)
$tables[6].SetColumnSpan($combos[6], 2)
$tables[6].SetColumnSpan($labels[8], 2)
$tables[6].SetColumnSpan($combos[7], 2)

foreach ($i in @(0,2,3,4)) { $tables[$i].ColumnCount = 2 }
foreach ($i in @(1,4,5))   { $tables[$i].ColumnCount = 3 }
foreach ($i in @(6))       { $tables[$i].ColumnCount = 4 }


$controls = @(

  ( $inputs[0],$labels[0],
    $clrButton,$combos[0] ),

  ( $lists[0], $lists[1],$trackBars[0] ),

  ( $combos[1],$labels[1],
    $combos[2],$labels[2],
    $combos[3],$labels[3] ),

  ( $checks[0],$checks[1] ),

  ( $buttons[0],$buttons[1],
    $inputs[1], $trackBars[1] ),

  ( $labels[4],
    $inputs[2],$trackBars[2],
    $combos[4],$labels[5],$combos[5] ),

  ( $labels[6],$inputs[3],$labels[7],
    $combos[6],$labels[8],
    $combos[7],$radios[0],$radios[1] )

)


$i=0
foreach ($collection in $controls) {
  $tables[$i].Controls.AddRange($collection)
  $groups[$i].Controls.Add($tables[$i])
  $tableForm.Controls.Add($groups[$i])
  $tables[$i].ResumeLayout()
  $groups[$i++].ResumeLayout()
}
$tableForm.Controls.Add($link)
$form.Controls.Add($tableForm)
$tableForm.ResumeLayout()
$form.ResumeLayout()

[Windows.Forms.Application]::Run($form)
